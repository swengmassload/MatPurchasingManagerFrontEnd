https://www.youtube.com/watch?v=QP1_vuzOYJs

import { useMutation, useQueryClient } from "@tanstack/react-query";

import {

  ProductResponseDTO,

  ReferenceCellStandardResponseDTO,

  TestEventArgs,

} from "../Models/ProductmanagerModels/Dto";

import { ProductManagerEnpoints } from "../Constants/EndPoints";

import { APIUrls } from "../Constants/FixValues";

import CRUDApi from "../Api/CRUDApi";

import { QueryKeys } from "../Constants/TanstankQueryKeys";



export interface StartFinalAutoTestProps {

  loadB: number;

  product: ProductResponseDTO;

  testPointPressures: number[]; //DefaultTestPointResponseDTO;

  controller: AbortController;

  referenceCellStandard: ReferenceCellStandardResponseDTO;

  IsUnitLbs: boolean;

}



export const useStartFinalAutoTest = () => {

  const queryClient = useQueryClient();

  return useMutation({

    mutationFn: (param: StartFinalAutoTestProps) =>

      CRUDApi<unknown, TestEventArgs>(

        APIUrls.ProductManagerAPIURL + ProductManagerEnpoints.VerificationEndPoint + "/PerformFinalAutoTest"

      ).addDataWtAbortToken(param.controller.signal, {

        loadB: param.loadB,

        product: param.product,

        testPointPressures: param.testPointPressures,

        referenceCell: param.referenceCellStandard,

        IsUnitLbs: param.IsUnitLbs,

      }),

    onSuccess: () => {

      queryClient.invalidateQueries({

        queryKey: [QueryKeys.useGetProductsByStageKey.mainKey],

      });

    },

  });

};

import { MutationCache, QueryClient, QueryKey, useMutation, useQueryClient } from "@tanstack/react-query";

import { TestEventArgs } from "../Models/ProductmanagerModels/Dto";

import { ProductManagerEnpoints } from "../Constants/EndPoints";

import { BASEAPIURL } from "../Constants/FixValues";

import CRUDApi from "../Api/CRUDApi";

import { QueryKeys } from "../Constants/TanstankQueryKeys";

import { StartAutoTestProps } from "../Pages/ProductionStages/Shared/SharedVerification/Autos/AutoTestProps";




 



export const useStartFinalAutoTest = () => {

  const queryClient =new  QueryClient({

  mutationCache: new MutationCache({

    onSuccess: (_data, _variables, _context,mutation) => {

      if (mutation.meta?.suceessMessage) {

          alert(mutation.meta.suceessMessage);

       }

    },

    onError: (error, _variables, _context, mutation) => {

      if (mutation.meta?.errorMessage) {

        alert(mutation.meta.errorMessage);

      } else {

        console.error("Error in mutation:", error);

      }

    },

    onSettled: (_data, _error, _variables,_context, mutation) => {

      if (mutation.meta?.invalidateQuery) {

        queryClient.invalidateQueries({

          queryKey: mutation.meta.invalidateQuery,

        });

      }

    }

})

  });

  



  return useMutation({

    mutationFn: (param: StartAutoTestProps) =>

      CRUDApi<unknown, TestEventArgs>(

        BASEAPIURL + ProductManagerEnpoints.VerificationEndPoint + "/PerformFinalAutoTest"

      ).addDataWtAbortToken(param.controller.signal, {

        loadB: param.loadB,

        product: param.product,

        testPointPressures: param.testPointPressures,

        referenceCell: param.referenceCellStandard,

        IsUnitLbs: param.IsUnitLbs,

      }),



      meta:{

        invalidateQuery: 

        [QueryKeys.useGetProductsByStageKey.mainKey,  ],

        suceessMessage: "Final auto test started successfully.",

        errorMessage: "Error starting final auto test.",

      },





  });

};

