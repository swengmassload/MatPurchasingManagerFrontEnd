import { useQuery } from "@tanstack/react-query";

import CRUDApi from "../Api/CRUDApi";
import { BASEAPIURL } from "../Constants/FixValues";
import { QueryKeys } from "../Constants/TanstankQueryKeys";
import { RMAManagerEnpoints } from "../Constants/EndPoints";

export interface useGetConfirmIfUserHasExistingValidTokenProps {
  UserId: string;
}

export const useGetConfirmIfUserHasExistingValidToken = (
  data: useGetConfirmIfUserHasExistingValidTokenProps | undefined,
  startSearching: boolean
) => {
  const queryResult = useQuery<ValidToken | undefined, Error>({
    queryKey: [QueryKeys.useGetConfirmIfUserHasExistingValidTokenPropsKey.mainKey, data?.UserId],
    queryFn: () => {
      if (!data?.UserId) {
        throw new Error("User Id is required");
      }
      return CRUDApi<useGetConfirmIfUserHasExistingValidTokenProps, ValidToken>(
        BASEAPIURL + RMAManagerEnpoints.ConfirmIfUserHasExistingValidToken
      ).getDataSinglewtQryParams(data);
    },
    enabled: !!data?.UserId && startSearching,
    // Disable retries for token validation
    retry: false,
    // Cache the result for 5 minutes to avoid repeated calls
    staleTime: 5 * 60 * 1000, // 5 minutes
    // Keep in cache for 10 minutes
    gcTime: 10 * 60 * 1000, // 10 minutes
    // Don't refetch on window focus
    refetchOnWindowFocus: false,
    // Don't refetch on reconnect
    refetchOnReconnect: false,
  });

  return queryResult;
};

export interface ValidToken {
  isValid: boolean;
  message?: string;
}
